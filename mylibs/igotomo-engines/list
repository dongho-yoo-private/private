data_struct/itx_linked_list.cc:    IGX_DEBUG("data:%p, next:%p, prev:%p", node->data, node->next, node->prev);
data_struct/itx_linked_list.cc:    IGX_DEBUG("data:%p, next:%p, prev:%p", temp->data, temp->next, temp->prev);
data_struct/itx_linked_list.h:        IGX_DEBUG("max_element_count:%d,count_per_page:%d", m_memory.max_element_count, m_memory.count_per_page);
data_struct/itx_linked_list.h:        IGX_DEBUG("ItxLinkedList for buffer Enter");
data_struct/itx_linked_list.h:        IGX_DEBUG("ItxLinkedList Exit");
data_struct/itx_linked_list.h:        IGX_DEBUG("max_element_count:%d,count_per_page:%d", m_memory.max_element_count, m_memory.count_per_page);
data_struct/itx_linked_list.h:    IGX_DEBUG("ItxLinkedList<T>::Add %p<-%p->%p", brank_node->prev, brank_node, brank_node->next);
data_struct/itx_linked_list.h:    IGX_DEBUG("ItxLinkedList<T>::get_brank_node() element_count:%d, max:%d", element_count, m_memory.max_element_count);
data_struct/itx_linked_list.h:    IGX_DEBUG("ItxLinkedList<T>::create_page(%d)", element_count);
debug/igx_debug.h:#ifndef _IGX_DEBUG_H_
debug/igx_debug.h:#define _IGX_DEBUG_H_
debug/igx_debug.h:#define IGX_DEBUG(...) igx_log(kLogLevelDebug, __VA_ARGS__)
debug/igx_debug.h:#   define IGX_DEBUG_LONG(...) printf(__VA_ARGS__)
debug/igx_debug.h:#define IGX_DEBUG_CONSOLE(level) igx_log_init(kLogOutputConsole, level, 0)
debug/igx_stack_trace.c:        IGX_DEBUG("%s", igx_get_symbole_name(addr[i]));
go/engine.cc:    IGX_DEBUG("offset:%d", offset);
go/engine.cc:        IGX_DEBUG("push (%d, %d)", node->data.stone.x, node->data.stone.y);
go/engine.cc:        IGX_DEBUG("%p, %p", &m_sgf.m_top, m_sgf.m_curr);
go/engine.cc:        IGX_DEBUG("AddStone(%d, %d)", stone.x, stone.y);
go/engine.operation.cc:    IGX_DEBUG("add stone called (%d, %d)", (int)stone.x, (int)stone.y);
go/engine.operation.cc:        IGX_DEBUG("get_stone_type() top branch!");
go/engine.operation.cc:            IGX_DEBUG("get_stone_type() curr:white!");
go/engine.operation.cc:            IGX_DEBUG("get_stone_type() curr:black!");
go/engine.operation.cc:    IGX_DEBUG("get_stone_type() type:%d!", type);
go/intern/go_libs.cc:        IGX_DEBUG("%s is not found!", tag);
go/intern/go_libs.cc:        IGX_DEBUG("%s research!! %c(%d)", tag, p_index[-1], (int)p_index[-1]);
go/intern/go_libs.cc:        IGX_DEBUG("%s end is not found", tag);
go/intern/go_libs.cc:        IGX_DEBUG("%s is not found!", tag);
go/intern/go_libs.cc:        IGX_DEBUG("%s research!!", tag);
go/intern/go_libs.cc:        IGX_DEBUG("%s tag end not found!", tag);
go/intern/go_libs.cc:        IGX_DEBUG("%c..............", p_index[i]);
go/intern/go_libs.cc:        IGX_DEBUG("%c..............2", p_index[i]);
go/intern/go_libs.cc:    IGX_DEBUG("%d..............", dest_len);
go/intern/go_libs.cc:    IGX_DEBUG("%s is found!(%s)", tag, dest);
go/sgf.body.cc:            IGX_DEBUG("create new stone_node");
go/sgf.body.cc:    IGX_DEBUG("sgf::parse_body success");
go/sgf.body.cc:    IGX_DEBUG("%s", p);
go/sgf.body.cc:    IGX_DEBUG("%c", p_comment_start[len]);
go/sgf.body.cc:        //IGX_DEBUG("%s", buffer);
go/sgf.cc:        IGX_DEBUG("sgf::Import(%s) read success", filename);
go/sgf.cc:        IGX_DEBUG("%s", p);
go/sgf.cc:                    IGX_DEBUG("sgf::AddStone() breanch move next!!");
go/sgf.cc:        IGX_DEBUG("next is not null, next:%d(%d, %d), stone%d(%d, %d)", m_curr->next->data.stone.type, m_curr->next->data.stone.x, m_curr->next->data.stone.y, stone.type, stone.x, stone.y);
go/sgf.cc:            IGX_DEBUG("sgf::AddStone() MoveNext!!");
go/sgf.cc:        IGX_DEBUG("sgf::AddStone() AddBranch!!");
go/sgf.cc:    IGX_DEBUG("sgf::AddStone() Add Next");
go/sgf.cc:                IGX_DEBUG("NULL_STONE, m_curr:%p, m_curr->prev:%p, m_curr->next:%p", m_curr, m_curr->prev, m_curr->next);
go/sgf.cc:                    IGX_DEBUG("m_curr:%p, m_curr->prev:%p, m_curr->next:%p", m_curr, m_curr->prev, m_curr->next);
go/sgf.cc:    IGX_DEBUG("m_curr:%p, m_curr->prev:%p, m_curr->next:%p", m_curr, m_curr->prev, m_curr->next);
go/sgf.cc:        IGX_DEBUG("it is top");
go/sgf.cc:        IGX_DEBUG("it prev node");
go/sgf.cc:    IGX_DEBUG("it is parent");
go/sgf.header.cc:    //IGX_DEBUG("%s", sgf);
go/sgf.header.cc:            IGX_DEBUG("sec:%d", sec);
go/sgf.tag.cc:        IGX_DEBUG("%s", p);
Binary file io/.igx_file.c.swp matches
io/igx_file.c:    IGX_DEBUG("igx_file_load called (%s) size:%zd", file_name, *size);
library/igx_memory.c:    IGX_DEBUG("========== memory info =============");
library/igx_memory.c:                IGX_DEBUG("%s:(%p)[%s] %dbytes-------------", p->header.tag, p, igx_time_to_string(time_buffer, p->header.time, "%02d/%02d/%02d %02d:%02d:%02d"), p->header.size);
library/igx_memory.c:                IGX_DEBUG("");
library/igx_memory.c:        IGX_DEBUG("tag %s is not fount");
library/igx_memory.c:    IGX_DEBUG("Total Used Memory: %d bytes", total_used_memory);
library/igx_memory.c:    IGX_DEBUG("Memory allocate count: %d ", total_allocated_count);
library/igx_memory.c:    IGX_DEBUG("====================================;");
library/igx_memory_cc.cc:    IGX_DEBUG("delete %p", p);
library/igx_memory_cc.cc:    IGX_DEBUG("delete success");
library/igx_time.c:        IGX_DEBUG("++++++++++++ %s: start!");
library/igx_time.c:        IGX_DEBUG("++++++++++++ %s: %u.%03u",title,(ubit32_t)(diff/1000), (ubit32_t)(diff%1000));
library/igx_time.c:    IGX_DEBUG("total_sec:%ld, total_min:%ld, totla_hour:%ld, total_day:%d, sec:%d, min:%d, hour:%d", total_sec, total_min, total_hour, total_day, sec, min, hour);
library/igx_time.c:    IGX_DEBUG("remain_day:%d, year:%d", remain_day, year);
library/igx_time.c:    IGX_DEBUG("..................1");
library/igx_time.c:    IGX_DEBUG("..................2");
library/itx_mem_page.cc:    IGX_DEBUG("create_page: size:%zd, allocated_size:%zd, remain:%zd, page_size:%zd, need_page_count:%zd",
library/itx_mem_page.cc:    IGX_DEBUG("allocation total count: %zd", m_allocated_page_count);
library/itx_mem_page.cc:    IGX_DEBUG("ItxMemPage::Pop(%zd) need_size:%zd, page_size:%zd called", size, need_size, page_size);
library/itx_mem_page.cc:        IGX_DEBUG("create new page: size:%zd, %p, next:%p, remain:%zd, offset:%u", size, ret, p->indicator, p->remain_memory, offset);
library/itx_mem_page.cc:            IGX_DEBUG("mempage deleted......");
library/itx_mem_page.cc:    IGX_DEBUG("++++++++++++++++++++++++++++++++++++++++++++++++++++");
library/itx_mem_page.cc:    IGX_DEBUG("ItxMemPage used count: %d", ___mem_page_list___.Count());
library/itx_mem_page.cc:        IGX_DEBUG("%p: mem:%d bytes, page:%d", mem_page, mem_page->GetUsingMemorySize(), mem_page->GetUsingPageCount());
library/itx_mem_page.cc:    IGX_DEBUG("ItxMemPage toal %dbytes, page: %d", total, total_page);
network/igx_sock.c:    IGX_DEBUG("socket invalid reason:%d", error);
network/igx_sock.c:            IGX_DEBUG("WANT_READ...... %d\n", n);
Binary file network/protocols/.http.c.swp matches
Binary file network/protocols/.http.static.ic.swp matches
network/protocols/http.c:    IGX_DEBUG("handle size %zd", sizeof(*s));
network/protocols/http.c:        IGX_DEBUG("ip:%s\n", igx_sock_addr_2_ip(buffer, s->header.addr));
network/protocols/http.c:    IGX_DEBUG("%s", p_host_name);
network/protocols/http.static.ic:        IGX_DEBUG("__http_malloc size:%zd", size);
network/protocols/http.static.ic:    IGX_DEBUG("__http_malloc size:%zd", size);
network/protocols/http.static.ic:    IGX_DEBUG("++++++++++++++++++++ request header");
network/protocols/http.static.ic:    IGX_DEBUG("%s", request);
network/protocols/http.static.ic:    IGX_DEBUG("++++++++++++++++++++ request body");
network/protocols/http.static.ic:    IGX_DEBUG("%s", (char*)data?(char*)data:"none");
network/protocols/http.static.ic:        IGX_DEBUG("%s", src);
network/protocols/http.static.ic:            IGX_DEBUG("%s", p);
network/protocols/http.static.ic:        IGX_DEBUG("status:%d!=200", s->response.status);
network/protocols/http.static.ic:    IGX_DEBUG("response size:%d bytes", s->response.size);
network/protocols/http.static.ic:    IGX_DEBUG("++++++ response header ++++++++");
network/protocols/http.static.ic:    IGX_DEBUG("%s", header);
network/protocols/http.static.ic:            IGX_DEBUG("###########..............................add count %d (%d), %p", igx_llist_count(h_list), chunk_size, data+sizeof(int));
network/protocols/http.static.ic:				IGX_DEBUG("read chunk data.... error!!!");
network/protocols/http.static.ic:                    IGX_DEBUG("chunk size %d (%p)", *size, x);
network/protocols/http.static.ic:                    IGX_DEBUG("%p<-%p->%p data:%p", node->prev, node, node->next, node->data);
network/protocols/http.static.ic:			//IGX_DEBUG("%s", data+sizeof(int));
network/protocols/http.static.ic:            IGX_DEBUG("chunk size %d (%p)", *size, x);
network/protocols/http.static.ic:            IGX_DEBUG("%p<-%p->%p", node->prev, node, node->next);
network/protocols/http.static.ic:            //IGX_DEBUG("%s", x);
network/protocols/http.static.ic:    IGX_DEBUG("%s", s->response.data);
Binary file samples/.igxhttp.c.swp matches
samples/igx_socket.c:    IGX_DEBUG("url:%s, port:%d", url, *port);
samples/igx_socket.c:    IGX_DEBUG("search host %s", url);
samples/igx_socket.c:        IGX_DEBUG("receiving......");
samples/igx_socket.c:            IGX_DEBUG("read timeout");
samples/igxhttp.c:        IGX_DEBUG("get_command %d", i);
samples/igxhttp.c:    IGX_DEBUG_CONSOLE(kLogLevelAll);
samples/igxhttp.c:        IGX_DEBUG("%s", (char*)data_file);
samples/igxhttp.c:        //IGX_DEBUG("%s", (char*)p);
samples/igxhttp.c:        IGX_DEBUG("++++++++++++++++++++++ response (%d) ++++++++++++++++++++++ ", response->size);
samples/igxhttp.c:        IGX_DEBUG_LONG("%s\n", response->data);
thread/igx_thread_ex.cc:       IGX_DEBUG("id:%d, name:%s", data.id, data.name);
thread/igx_thread_ex.cc:       IGX_DEBUG("id:%d, name:%s", item.id, item.name);
thread/igx_thread_ex.cc:       IGX_DEBUG("id:%d, name:%s", item.id, item.name);
thread/igx_thread_ex.cc:    IGX_DEBUG("ThreadTestClass::Start() !!");
thread/igx_thread_ex.cc:       IGX_DEBUG("id:%d, name:%s", item.id, item.name);
thread/igx_thread_ex.cc:        IGX_DEBUG("Add, %s", item.name);
